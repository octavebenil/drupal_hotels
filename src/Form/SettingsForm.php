<?php
namespace Drupal\hotels\Form;

use Drupal\Core\Form\ConfigFormBase;
use Drupal\Core\Form\FormStateInterface;

class SettingsForm extends ConfigFormBase
{

  public function getEditableConfigNames()
  {
    return [
      'hotels.adminsettings'
    ];
  }

  public function getFormId()
  {
    return 'hotels_settings_form';
  }

  public function buildForm(array $form, FormStateInterface $form_state)
  {

    $config = $this->config('hotels.adminsettings');

    $form["app_name"] = [
      '#type' => 'textfield',
      '#title' => $this->t("Nom de l'application"),
      '#description' => $this->t("App name"),
      '#default_value' => $config->get("app_name"),
    ];


    $form["api_key"] = [
      '#type' => 'textfield',
      '#title' => $this->t("API KEY"),
      '#description' => $this->t("PRIVATE KEY"),
      '#default_value' => $config->get("api_key"),
    ];


    $form["api_secret"] = [
      '#type' => 'textfield',
      '#title' => $this->t("API SECRET"),
      '#description' => $this->t("SECRET KEY"),
      '#default_value' => $config->get("api_secret"),
    ];

    return parent::buildForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function validateForm(array &$form, FormStateInterface $form_state)
  {
    parent::validateForm($form, $form_state); // TODO: Change the autogenerated stub
  }

  public function submitForm(array &$form, FormStateInterface $form_state)
  {
    parent::submitForm($form, $form_state);

    $this->config('hotels.adminsettings')
      ->set('app_name', $form_state->getValue('app_name'))
      ->set('app_key', $form_state->getValue('app_key'))
      ->set('app_secret', $form_state->getValue('app_secret'))
      ->save();
  }

}
